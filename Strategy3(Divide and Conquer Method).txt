STRATEGY-3
DIVIDE AND CONQUER METHOD
1.     The approach is quite similar to “Maximum Subarray Problem – Divide and Conquer”
2.     Task is to find out subarray which has the largest sum. So we need to find out the 2 date indexes (left index and right index) between which the profit is maximum.
3.     Divide the problem into 2 parts, left half and right half.
4.     Now we can conclude the final result will be in one of the three possibilities. 
a.	Left half of the array. (Buy date index and sell date index both are in left half of the array).
b.	Right half of the array. (Buy date index and sell date index both are in right half of the array).
c.	Result will cross the middle of the array. (Buy date index in the and left half of the array and sell date index in right half of the array).
5.	Solve the all three and return the maximum among them.
6.	Left half and right half of the array will be solved recursively.
7.	Maintain an object to keep track of profit and date indexes.
TIME COMPLEXITY:- O(logn)



CODE:-


OUTPUT CLASS:-

package Share_Price;

public class Output {

	int max_profit=0;
    int buy_date=0;
    int sell_date=0;
    public Output(int max_profit, int buy_date,int sell_date){
        this.max_profit = max_profit;
        this.buy_date = buy_date;
        this.sell_date = sell_date;
    }
}

}
STRATEGY3 CLASS	

package Share_Price;

public class Strategy3 {

	int max=0;
	int min=1000,index_1=0,index_2=0,k=0,m=0,b=0;
	public void Find_Max_and_Min(int [] prices) {
		for(int i=0;i<prices.length;i++) {
			if(prices[i]>max) {
				max=prices[i];
				
				
			}
			if(prices[i]<min) {
				min=prices[i];
			}
		}
		
	
	}
	
	public Output maxProfit(int [] prices, int start, int end){
        if(start>=end){
            return new Output(0,0,0);
        }
        int mid = start +  (end-start)/2;
        Output left_Output = maxProfit(prices,start,mid);
        Output right_Output = maxProfit(prices,mid+1,end);
        int minLeftIndex = get_Buying_Index(prices,start, mid);
        int maxRightIndex =get_Selling_Index(prices,prices, mid, end);
        int centerProfit = prices[maxRightIndex] - prices[minLeftIndex];
        return new Output(centerProfit,minLeftIndex,maxRightIndex);
     
   
	}

    public int get_Buying_Index(int [] left_Output, int i, int j){
   		int min1=left_Output[0]-min;
		for(j=0;j<left_Output.length;j++) {
			b=left_Output[j]-min;
			if(b<min1) {
				min1=b;
				if(left_Output[j+1]-min>min1) {
					k=left_Output[j];
					index_1=j;
					break;
				}
				
			}
			
		}
		return index_1;
    	
    }
    
    public int get_Selling_Index(int [] right_Output,int [] prices, int i, int j){
    	int max1=max-right_Output[prices.length/2];
    	for(int l=right_Output.length-1;l>=0;l--) {
			b=max-right_Output[l];
			if(b<max1) {
				max1=b;
				if(max-right_Output[l-1]>max1) {
					m=right_Output[l];
					index_2=l;
					break;
				}
				
			}
    	}
    	return index_2;
			
		

    	
    }

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Strategy3 S3 = new Strategy3();
	    int [] prices ={80,100,110,90,65,70,75,90,80,70,100,80,65,60,55,50};
	    int start = 0;
	    int end = prices.length-1;
	    Output result = S3.maxProfit(prices,start,end);
	    System.out.println("Maximum Profit: " +result.max_profit );
	    System.out.println("Buy Day: " + result.buy_date);
	    System.out.println("Sell Day: " + result.sell_date);

	}


}


OUTPUT:-
Max_Profit=35
Best Buy_Day=4
Best Sell_Day=10